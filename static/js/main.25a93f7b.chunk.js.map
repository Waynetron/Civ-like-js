{"version":3,"sources":["Map/map-logic.js","Images/images/forest.svg","Images/images/castle.svg","Images/images/mountain.svg","Images/images/num1.svg","Images/images/num2.svg","Images/images/num3.svg","Images/images/num4.svg","Images/images/num5.svg","Images/images/num6.svg","Images/images/skeleton.svg","Images/images/skeleton-hover.svg","Images/images/skeleton-selected.svg","Images/images/rabbit.svg","Images/images/rabbit-hover.svg","Images/images/rabbit-selected.svg","Images/images.js","Map/map-constants.js","Unit/unit.js","Map/moveable.js","Util/colors.js","Tile/tile.js","Tile/hex.js","Map/Map.js","Battle/Battle.js","Battle/battle-logic.js","App/App.js","reportWebVitals.js","index.js"],"names":["hexGroup","imageGroup","unitGroup","mapGroup","images","Y_SPACING","Math","sin","PI","MAP_HEIGHT","HEX_TYPE_DISTRIBUTION","makeUnit","type","team","startPosition","state","onSelect","image","clone","hoverImage","selectedImage","visible","makeUnitImages","group","Paper","Group","applyMatrix","sprite","addChildren","position","Point","addChild","unit","getPosition","moveTo","newPosition","moveable","speed","select","scaling","tween","easing","duration","deselect","onMouseEnter","event","onMouseLeave","selected","onClick","colors","black","white","yellow","lightYellow","lightGrey","darkGrey","makeTile","onMove","onAttack","onCancel","x","y","i","floor","random","length","getRandomType","tile","locked","translate","bounds","width","height","makeTileImage","hex","strokeColor","strokeWidth","bringToFront","fillColor","radius","Path","RegularPolygon","center","sides","rotation","makeHex","hover","unitA","unitB","units","areEnemies","tiles","col","row","HEX_RADIUS","initMap","setSelected","project","clear","newSelected","newTiles","push","makeTiles","newUnits","skeleton","rabbit","makeUnits","view","onMouseDrag","delta","draw","Map","startBattle","useState","useEffect","className","Battle","finishBattle","App","canvasRef","useRef","isLoaded","setLoaded","screen","setScreen","setup","current","onComplete","imagesToLoad","forest","forestSVG","castle","castleSVG","mountain","mountainSVG","num1","num1SVG","num2","num2SVG","num3","num3SVG","num4","num4SVG","num5","num5SVG","num6","num6SVG","skeletonSVG","skeletonHover","skeletonHoverSVG","skeletonSelected","skeletonSelectedSVG","rabbitSVG","rabbitHover","rabbitHoverSVG","rabbitSelected","rabbitSelectedSVG","svg","importSVG","onLoad","Object","entries","insert","preloadImages","result","console","log","ref","id","resize","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25a93f7b.chunk.js","sourcesContent":["import Paper from \"paper\";\nimport { makeTile } from \"../Tile/tile\";\nimport { makeUnit } from \"../Unit/unit\";\nimport {\n  NUM_COLS,\n  NUM_ROWS,\n  MAP_WIDTH,\n  MAP_HEIGHT,\n  X_SPACING,\n  Y_SPACING,\n  ODD_ROW_OFFSET,\n} from \"./map-constants\";\n\nlet hexGroup;\nlet imageGroup;\nlet unitGroup;\nlet mapGroup;\n\n// each tile is given a reference to the state object\n// this allows them to directly read and mutate the current state properties\nconst state = {\n  selected: null,\n  tiles: [],\n  units: [],\n};\n\nconst getPosition = function (col, row) {\n  const startX = 0 - MAP_WIDTH / 2;\n  const startY = 0 - MAP_HEIGHT / 2;\n  const isOddRow = row % 2 === 0;\n  const x = startX + col * X_SPACING + (isOddRow ? ODD_ROW_OFFSET : 0);\n  const y = startY + row * Y_SPACING;\n\n  return [x, y];\n};\n\nconst makeTiles = function (onSelect, onMove) {\n  const newTiles = [];\n\n  for (let row = 0; row < NUM_ROWS; row++) {\n    for (let col = 0; col < NUM_COLS; col++) {\n      const position = getPosition(col, row);\n      newTiles.push(makeTile(position, state, onSelect, onMove));\n    }\n  }\n  return newTiles;\n};\n\nconst makeUnits = function (onSelect) {\n  const newUnits = [];\n\n  const skeleton = makeUnit(\n    \"skeleton\",\n    \"yellow\",\n    getPosition(0, 1),\n    state,\n    onSelect\n  );\n  newUnits.push(skeleton);\n\n  const rabbit = makeUnit(\"rabbit\", \"red\", getPosition(3, 5), state, onSelect);\n  newUnits.push(rabbit);\n\n  return newUnits;\n};\n\nexport const initMap = function (setSelected) {\n  Paper.project.clear();\n\n  // Apply matix is necessary to get sane relative coordinate systems within all the children\n  hexGroup = new Paper.Group({\n    applyMatrix: false,\n  });\n  imageGroup = new Paper.Group({\n    applyMatrix: false,\n  });\n  unitGroup = new Paper.Group({\n    applyMatrix: false,\n  });\n  mapGroup = new Paper.Group({\n    applyMatrix: false,\n  });\n\n  mapGroup.addChildren([hexGroup, imageGroup, unitGroup]);\n\n  const onSelect = function (newSelected) {\n    state.selected?.deselect();\n    setSelected(newSelected); // update external state (React)\n    state.selected = newSelected; // update internal state\n  };\n\n  const onMove = function (unit, tile) {\n    unit.moveTo(tile.getPosition());\n    onSelect(null);\n  };\n\n  const onAttack = function (attacker, defender, tile) {\n    console.log(attacker.type, \"is attacking\", defender.type);\n    onCancel();\n  };\n\n  const onCancel = function (attacker, defender, tile) {\n    onSelect(null);\n  };\n\n  state.tiles = makeTiles(onSelect, onMove, onAttack, onCancel);\n  for (const tile of state.tiles) {\n    hexGroup.addChild(tile.hex);\n    if (tile.image) {\n      imageGroup.addChild(tile.image);\n    }\n  }\n\n  state.units = makeUnits(onSelect);\n  for (const unit of state.units) {\n    unitGroup.addChild(unit.group);\n  }\n\n  mapGroup.translate(\n    new Paper.Point(Paper.view.bounds.width / 2, Paper.view.bounds.height / 2)\n  );\n\n  Paper.view.onMouseDrag = (event) => {\n    mapGroup.translate(event.delta);\n  };\n\n  Paper.view.draw();\n};\n","export default __webpack_public_path__ + \"static/media/forest.6aa768e8.svg\";","export default __webpack_public_path__ + \"static/media/castle.a326f42e.svg\";","export default __webpack_public_path__ + \"static/media/mountain.94073b47.svg\";","export default __webpack_public_path__ + \"static/media/num1.371ec2e2.svg\";","export default __webpack_public_path__ + \"static/media/num2.a56ff6e2.svg\";","export default __webpack_public_path__ + \"static/media/num3.da848c9d.svg\";","export default __webpack_public_path__ + \"static/media/num4.944e5e39.svg\";","export default __webpack_public_path__ + \"static/media/num5.ff5af1a8.svg\";","export default __webpack_public_path__ + \"static/media/num6.13bde0f9.svg\";","export default __webpack_public_path__ + \"static/media/skeleton.04605ff3.svg\";","export default __webpack_public_path__ + \"static/media/skeleton-hover.fe033f88.svg\";","export default __webpack_public_path__ + \"static/media/skeleton-selected.240417a9.svg\";","export default __webpack_public_path__ + \"static/media/rabbit.6a371796.svg\";","export default __webpack_public_path__ + \"static/media/rabbit-hover.7c84ddc9.svg\";","export default __webpack_public_path__ + \"static/media/rabbit-selected.b150d05f.svg\";","import Paper from \"paper\";\nimport forestSVG from \"./images/forest.svg\";\nimport castleSVG from \"./images/castle.svg\";\nimport mountainSVG from \"./images/mountain.svg\";\nimport num1SVG from \"./images/num1.svg\";\nimport num2SVG from \"./images/num2.svg\";\nimport num3SVG from \"./images/num3.svg\";\nimport num4SVG from \"./images/num4.svg\";\nimport num5SVG from \"./images/num5.svg\";\nimport num6SVG from \"./images/num6.svg\";\nimport skeletonSVG from \"./images/skeleton.svg\";\nimport skeletonHoverSVG from \"./images/skeleton-hover.svg\";\nimport skeletonSelectedSVG from \"./images/skeleton-selected.svg\";\nimport rabbitSVG from \"./images/rabbit.svg\";\nimport rabbitHoverSVG from \"./images/rabbit-hover.svg\";\nimport rabbitSelectedSVG from \"./images/rabbit-selected.svg\";\nexport const images = {};\nexport const preloadImages = function ({ onComplete }) {\n  const imagesToLoad = {\n    forest: forestSVG,\n    castle: castleSVG,\n    mountain: mountainSVG,\n    num1: num1SVG,\n    num2: num2SVG,\n    num3: num3SVG,\n    num4: num4SVG,\n    num5: num5SVG,\n    num6: num6SVG,\n    skeleton: skeletonSVG,\n    skeletonHover: skeletonHoverSVG,\n    skeletonSelected: skeletonSelectedSVG,\n    rabbit: rabbitSVG,\n    rabbitHover: rabbitHoverSVG,\n    rabbitSelected: rabbitSelectedSVG,\n  };\n\n  for (const [type, svg] of Object.entries(imagesToLoad)) {\n    Paper.project.importSVG(svg, {\n      onLoad: (image) => {\n        image.applyMatrix = false;\n        images[type] = image;\n        if (\n          Object.entries(images).length === Object.entries(imagesToLoad).length\n        ) {\n          onComplete();\n        }\n      },\n      insert: false,\n    });\n  }\n};\n","export const NUM_COLS = 6;\nexport const NUM_ROWS = 10;\nexport const HEX_RADIUS = 65;\n\nexport const X_SPACING = HEX_RADIUS * 3;\nexport const Y_SPACING = HEX_RADIUS * Math.sin((60 * Math.PI) / 180);\nexport const ODD_ROW_OFFSET = HEX_RADIUS * 1.5;\nexport const MAP_WIDTH = NUM_COLS * X_SPACING;\nexport const MAP_HEIGHT = NUM_ROWS * Y_SPACING;\n\nexport const HEX_TYPES = [\"grass\", \"mountain\", \"castle\", \"forest\"];\nexport const HEX_TYPE_DISTRIBUTION = [\n  \"grass\",\n  \"grass\",\n  \"grass\",\n  \"grass\",\n  \"grass\",\n  \"grass\",\n  \"grass\",\n  \"grass\",\n  \"grass\",\n  \"grass\",\n  \"grass\",\n  \"forest\",\n  \"forest\",\n  \"forest\",\n  \"forest\",\n  \"forest\",\n  \"forest\",\n  \"mountain\",\n  \"mountain\",\n  \"mountain\",\n  \"mountain\",\n  \"castle\",\n];\n","import Paper from \"paper\";\nimport { images } from \"../Images/images\";\nimport { makeMoveable } from \"../Map/moveable\";\n\nconst makeUnitImages = function (type) {\n  const image = images[type].clone();\n  const hoverImage = images[`${type}Hover`].clone();\n  const selectedImage = images[`${type}Selected`].clone();\n\n  selectedImage.visible = false;\n  hoverImage.visible = false;\n\n  return [image, hoverImage, selectedImage];\n};\n\nexport const makeUnit = function (type, team, startPosition, state, onSelect) {\n  const [image, hoverImage, selectedImage] = makeUnitImages(type);\n  const group = new Paper.Group({\n    applyMatrix: false,\n  });\n  const sprite = new Paper.Group({\n    applyMatrix: false,\n  });\n  sprite.addChildren([selectedImage, image, hoverImage]);\n  sprite.position = new Paper.Point(0, 0);\n  group.addChild(sprite);\n  group.position = startPosition;\n\n  // make tile (and inject hex)\n  const unit = {\n    type,\n    team,\n    group,\n    image,\n    selectedImage,\n  };\n\n  unit.getPosition = function () {\n    return group.position;\n  };\n\n  unit.moveTo = function (newPosition) {\n    group.position = newPosition;\n  };\n\n  unit.moveable = makeMoveable(unit, 1);\n\n  unit.select = function () {\n    selectedImage.visible = true;\n    sprite.scaling = new Paper.Point(1.2, 1.2);\n\n    sprite.tween(\n      { scaling: [1.1, 1.1] },\n      { easing: \"easeInOutCubic\", duration: 120 }\n    );\n  };\n\n  unit.deselect = function () {\n    selectedImage.visible = false;\n\n    // ideally, we should check to see if the mouse is over the sprite or not\n    // when deselecting and then decide whether or not to show the hovered\n    // state.\n    image.visible = true;\n    hoverImage.visible = false;\n\n    sprite.scaling = new Paper.Point(0.9, 0.9);\n    sprite.tween(\n      { scaling: [1, 1] },\n      { easing: \"easeInOutCubic\", duration: 120 }\n    );\n  };\n\n  group.onMouseEnter = function (event) {\n    image.visible = false;\n    hoverImage.visible = true;\n  };\n\n  group.onMouseLeave = function (event) {\n    if (state.selected !== unit) {\n      image.visible = true;\n      hoverImage.visible = false;\n    }\n  };\n\n  group.onClick = function (event) {\n    if (state.selected === unit) {\n      onSelect(null);\n      unit.deselect();\n    } else {\n      onSelect(unit);\n      unit.select();\n    }\n  };\n\n  return unit;\n};\n\nexport const areEnemies = function (unitA, unitB) {\n  return unitA.team !== unitB.team;\n};\n","export const makeMoveable = function (unit, speed) {\n  return {\n    speed,\n  };\n};\n","const colors = {\n  black: \"black\",\n  white: \"white\",\n  yellow: \"#FFD25D\",\n  lightYellow: \"#FFF2CE\",\n  lightGrey: \"#EEE\",\n  darkGrey: \"#BBB\",\n};\n\nexport default colors;\n","import { images } from \"../Images/images\";\nimport { HEX_TYPE_DISTRIBUTION, HEX_RADIUS } from \"../Map/map-constants\";\nimport { areEnemies } from \"../Unit/unit\";\nimport colors from \"../Util/colors\";\nimport { makeHex } from \"./hex\";\n\nconst getRandomType = function () {\n  const i = Math.floor(Math.random() * HEX_TYPE_DISTRIBUTION.length);\n  return HEX_TYPE_DISTRIBUTION[i];\n};\n\nconst makeTileImage = function (x, y, type) {\n  if (type === \"grass\") {\n    return null;\n  }\n\n  const image = images[type].clone();\n  // disables mouse interactions (to prevent from blocking clicks on the hex underneath)\n  image.locked = true;\n  image.translate(x - image.bounds.width / 2, y - image.bounds.height / 2);\n  return image;\n};\n\nconst getUnitAtTile = function (tile, units) {\n  return null;\n};\n\nexport const makeTile = function (\n  position,\n  state,\n  onSelect,\n  onMove,\n  onAttack,\n  onCancel\n) {\n  const [x, y] = position;\n  const type = getRandomType();\n  const image = makeTileImage(x, y, type);\n  const tile = {\n    type,\n    image,\n  };\n\n  tile.getPosition = function () {\n    return position;\n  };\n\n  tile.select = function () {\n    tile.hex.strokeColor = colors.yellow;\n    tile.hex.strokeWidth = 5;\n    tile.hex.bringToFront();\n  };\n\n  tile.deselect = function () {\n    tile.hex.strokeColor = colors.lightGrey;\n    tile.hex.fillColor = colors.white;\n    tile.hex.strokeWidth = 2;\n  };\n\n  tile.hover = function () {\n    if (state.selected !== tile) {\n      tile.hex.strokeColor = colors.lightYellow;\n      tile.hex.strokeWidth = 5;\n      tile.hex.bringToFront();\n    }\n\n    // make sure the selected tile remains on top (if it's a tile)\n    state.selected?.hex?.bringToFront();\n\n    if (state.selected?.moveable) {\n      //\n    }\n  };\n\n  tile.hex = makeHex(x, y, HEX_RADIUS);\n\n  tile.hex.onMouseEnter = function (event) {\n    tile.hover();\n  };\n\n  tile.hex.onMouseLeave = function (event) {\n    if (state.selected !== tile) {\n      tile.deselect();\n    }\n  };\n\n  tile.hex.onClick = function (event) {\n    if (state.selected === tile) {\n      // tile already selected, so deselect\n      tile.hex.strokeColor = colors.darkGrey;\n      tile.hex.strokeWidth = 2;\n      onSelect(null);\n    } else if (state.selected === null) {\n      // nothing is selected, select the tile\n      onSelect(tile);\n      tile.select();\n    } else if (state.selected.moveable) {\n      // infer that selection is a unit\n      const unitA = state.selected;\n      const unitB = getUnitAtTile(tile, state.units);\n      if (!unitB) {\n        // tile is empty, unit can move here\n        onMove(state.selected, tile);\n      } else if (areEnemies(unitA, unitB)) {\n        // tile contains enemy unit\n        onAttack(unitA, unitB, tile);\n      } else {\n        // tile contains friendly unit\n        onCancel();\n      }\n    } else {\n      // some other tiles is selected, select the new tile\n      onSelect(tile);\n      tile.select();\n    }\n  };\n\n  return tile;\n};\n","import Paper from \"paper\";\nimport colors from \"../Util/colors\";\nexport const makeHex = function (x, y, radius) {\n  const hex = new Paper.Path.RegularPolygon({\n    center: [x, y],\n    sides: 6,\n    radius: radius,\n    strokeColor: colors.lightGrey,\n    fillColor: colors.white,\n    strokeWidth: 2,\n    rotation: 90,\n    applyMatrix: false,\n  });\n\n  return hex;\n};\n","import { useEffect, useState } from \"react\";\nimport { initMap } from \"./map-logic\";\nimport \"./Map.css\";\n\nfunction Map({ startBattle }) {\n  const [selected, setSelected] = useState(null);\n\n  useEffect(() => {\n    initMap(setSelected);\n  }, []);\n\n  return (\n    <div className=\"map-container\">\n      {selected && (\n        <div className=\"selection-info\">\n          <h2>Selected: {selected.type}</h2>\n          <button onClick={startBattle}>Build unit</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Map;\n","import { useEffect } from \"react\";\nimport { initBattle } from \"./battle-logic\";\nimport \"./Battle.css\";\n\nfunction Battle({ finishBattle }) {\n  useEffect(() => {\n    initBattle();\n  }, []);\n\n  return (\n    <div className=\"battle-container\">\n      <h1>Battle</h1>\n      <button onClick={() => finishBattle(\"Player wins\")}>Win</button>\n      <button onClick={() => finishBattle(\"Player loses\")}>Lose</button>\n    </div>\n  );\n}\n\nexport default Battle;\n","import Paper from \"paper\";\n\nexport const initBattle = function () {\n  Paper.project.clear();\n};\n","import Paper from \"paper\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { preloadImages } from \"../Images/images\";\nimport Map from \"../Map/Map\";\nimport Battle from \"../Battle/Battle\";\nimport \"./App.css\";\n\nfunction App() {\n  const canvasRef = useRef();\n  const [isLoaded, setLoaded] = useState(false);\n  const [screen, setScreen] = useState(\"map\");\n\n  useEffect(() => {\n    Paper.setup(canvasRef.current);\n    preloadImages({\n      onComplete: () => setLoaded(true),\n    });\n  }, [setLoaded]);\n  return (\n    <div className=\"App\">\n      <div className=\"UI\">\n        {isLoaded ? (\n          <>\n            {screen === \"map\" && (\n              <Map\n                startBattle={() => {\n                  setScreen(\"battle\");\n                }}\n              />\n            )}\n            {screen === \"battle\" && (\n              <Battle\n                finishBattle={(result) => {\n                  console.log(result);\n                  setScreen(\"map\");\n                }}\n              />\n            )}\n          </>\n        ) : (\n          <p>Loading</p>\n        )}\n      </div>\n      <canvas ref={canvasRef} id=\"canvas\" resize=\"true\" />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}